config.py
from pydantic import BaseSettings

class Settings(BaseSettings):
    PAGE_SIZE: int = 15
    UPLOAD_DIR: str = "uploads"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    AI_PREFIX: str = "(AI)"
    RAW_PREFIX: str = "(RAW)"

class Settings(BaseSettings):
    # تنظیمات پردازش صدا
    AUDIO_CHUNK_SIZE: int = 50  # ثانیه
    DEFAULT_AUDIO_LANG: str = "fa-IR"
    AUDIO_MAX_RETRIES: int = 3
    
    # تنظیمات سرویس هوش مصنوعی
    AI_API_URL: str = "https://api.gapgpt.app/v1/chat/completions"
    AI_MODEL_NAME: str = "gpt-4"
    AI_SYSTEM_PROMPT: str = "متن را ویرایش کن..."
    AI_TEMPERATURE: float = 0.2
    AI_API_TIMEOUT: int = 120  # ثانیه
    AI_MAX_RETRIES: int = 3
    
from pydantic import BaseSettings, SecretStr

class Settings(BaseSettings):
    # امنیتی
    SECRET_KEY: SecretStr = SecretStr("default-secret-key-change-me")
    JWT_ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    API_KEY_VALIDATION_STR: str = "YourActual"  # برای بررسی صحت کلید API
    
    # دیتابیس
    DATABASE_URL: str = "sqlite:///./transcriber.db"
    TEST_DATABASE_URL: str = "sqlite:///:memory:"
    
    # مسیرها
    UPLOAD_DIR: str = "uploads"
    STATIC_DIR: str = "static"
    
    # تنظیمات Celery
    CELERY_BROKER_URL: str = "redis://localhost:6379/0"
    CELERY_RESULT_BACKEND: str = "redis://localhost:6379/1"
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"

settings = Settings()
    class Config:
        env_file = ".env"
settings = Settings()


logger.py
import logging
from pathlib import Path
from logging.handlers import RotatingFileHandler
from app.core.config import settings

def setup_logging():
    """پیکربندی سیستم لاگ‌گیری"""
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    # فرمت پایه
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # هندلر کنسول
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)

    # هندلر فایل (چرخشی)
    file_handler = RotatingFileHandler(
        log_dir / "app.log",
        maxBytes=1024 * 1024 * 5,  # 5 MB
        backupCount=3
    )
    file_handler.setFormatter(formatter)

    # سطح پایه لاگ‌گیری
    logging.basicConfig(
        level=logging.INFO,
        handlers=[console_handler, file_handler]
    )

    # لاگ‌های خاص
    sql_logger = logging.getLogger('sqlalchemy.engine')
    sql_logger.setLevel(logging.WARNING)

    # لاگ‌های سوم‌پارت‌ها
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('celery').setLevel(logging.INFO)


file_manager.py
from pathlib import Path
from app.core.config import settings
import logging

logger = logging.getLogger(__name__)

class FileManager:
    def __init__(self):
        self.upload_dir = Path(settings.UPLOAD_DIR)
        self.upload_dir.mkdir(parents=True, exist_ok=True)

    def get_upload_path(self, filename: str) -> Path:
        """مسیر کامل فایل آپلود شده را برمی‌گرداند"""
        return self.upload_dir / filename

    def save_file(self, file_content: bytes, filename: str) -> Path:
        """ذخیره فایل با مدیریت خطا"""
        file_path = self.get_upload_path(filename)
        try:
            with open(file_path, "wb") as f:
                f.write(file_content)
            return file_path
        except Exception as e:
            logger.error(f"Failed to save file {filename}: {e}")
            raise

    def delete_file(self, filename: str) -> bool:
        """حذف فایل با مدیریت خطا"""
        file_path = self.get_upload_path(filename)
        try:
            if file_path.exists():
                file_path.unlink()
                return True
            return False
        except Exception as e:
            logger.error(f"Failed to delete file {filename}: {e}")
            return False

file_manager = FileManager()